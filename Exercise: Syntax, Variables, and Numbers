{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"learntools_metadata":{"lesson_index":0,"type":"exercise"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# **This notebook is an exercise in the [Python](https://www.kaggle.com/learn/python) course.  You can reference the tutorial at [this link](https://www.kaggle.com/colinmorris/hello-python).**\n# \n# ---\n\n# %% [markdown]\n# Welcome to your first set of Python coding problems.  If this is your first time using Kaggle Notebooks, welcome! \n# \n# Notebooks are composed of blocks (called \"cells\") of text and code. Each of these is editable, though you'll mainly be editing the code cells to answer some questions.\n# \n# To get started, try running the code cell below (by pressing the ‚ñ∫ button, or clicking on the cell and pressing ctrl+enter on your keyboard).\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:22:02.635160Z\",\"iopub.execute_input\":\"2024-10-26T13:22:02.635532Z\",\"iopub.status.idle\":\"2024-10-26T13:22:02.643140Z\",\"shell.execute_reply.started\":\"2024-10-26T13:22:02.635497Z\",\"shell.execute_reply\":\"2024-10-26T13:22:02.640561Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nprint(\"You've successfully run some Python code\")\nprint(\"Congratulations!\")\n\n# %% [markdown]\n# Try adding another line of code in the cell above and re-running it. \n# \n# Now let's get a little fancier:  Add a new code cell by clicking on an existing code cell, hitting the escape key, and then hitting the `a` or `b` key.  The `a` key will add a cell above the current cell, and `b` adds a cell below.\n# \n# Great! Now you know how to use Notebooks.\n# \n# Each hands-on exercise starts by setting up our feedback and code checking mechanism. Run the code cell below to do that. Then you'll be ready to move on to question 0.\n\n# %% [code] {\"_kg_hide-input\":true,\"_kg_hide-output\":true,\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:22:08.781095Z\",\"iopub.execute_input\":\"2024-10-26T13:22:08.782074Z\",\"iopub.status.idle\":\"2024-10-26T13:22:08.788264Z\",\"shell.execute_reply.started\":\"2024-10-26T13:22:08.782029Z\",\"shell.execute_reply\":\"2024-10-26T13:22:08.787046Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nfrom learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex1 import *\nprint(\"Setup complete! You're ready to start question 0.\")\n\n# %% [markdown]\n# # 0.\n# \n# *This is a silly question intended as an introduction to the format we use for hands-on exercises throughout all Kaggle courses.*\n# \n# **What is your favorite color? **\n# \n# To complete this question, create a variable called `color` in the cell below with an appropriate value. The function call `q0.check()` (which we've already provided in the cell below) will check your answer.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:23:30.606460Z\",\"iopub.execute_input\":\"2024-10-26T13:23:30.606839Z\",\"iopub.status.idle\":\"2024-10-26T13:23:30.616143Z\",\"shell.execute_reply.started\":\"2024-10-26T13:23:30.606807Z\",\"shell.execute_reply\":\"2024-10-26T13:23:30.614580Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# create a variable called color with an appropriate value on the line below\n# (Remember, strings in Python must be enclosed in 'single' or \"double\" quotes)\ncolor = \"blue\"\n\n# Check your answer\nq0.check()\n\n# %% [markdown]\n# Didn't get the right answer? How do you not even know your own favorite color?!\n# \n# Delete the `#` in the line below to make one of the lines run. You can choose between getting a hint or the full answer by choosing which line to remove the `#` from. \n# \n# Removing the `#` is called uncommenting, because it changes that line from a \"comment\" which Python doesn't run to code, which Python does run.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:23:32.877262Z\",\"iopub.execute_input\":\"2024-10-26T13:23:32.877643Z\",\"iopub.status.idle\":\"2024-10-26T13:23:32.882085Z\",\"shell.execute_reply.started\":\"2024-10-26T13:23:32.877608Z\",\"shell.execute_reply\":\"2024-10-26T13:23:32.880998Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n#q0.hint()\n# q0.solution()\n\n# %% [markdown]\n# The upcoming questions work the same way. The only thing that will change are the question numbers. For the next question, you'll call `q1.check()`, `q1.hint()`, `q1.solution()`, for question 2, you'll call `q2.check()`, and so on.\n\n# %% [markdown]\n# <hr/>\n# \n# # 1.\n# \n# Complete the code below. In case it's helpful, here is the table of available arithmetic operations:\n# \n# \n# \n# | Operator     | Name           | Description                                            |\n# |--------------|----------------|--------------------------------------------------------|\n# | ``a + b``    | Addition       | Sum of ``a`` and ``b``                                 |\n# | ``a - b``    | Subtraction    | Difference of ``a`` and ``b``                          |\n# | ``a * b``    | Multiplication | Product of ``a`` and ``b``                             |\n# | ``a / b``    | True division  | Quotient of ``a`` and ``b``                            |\n# | ``a // b``   | Floor division | Quotient of ``a`` and ``b``, removing fractional parts |\n# | ``a % b``    | Modulus        | Integer remainder after division of ``a`` by ``b``     |\n# | ``a ** b``   | Exponentiation | ``a`` raised to the power of ``b``                     |\n# | ``-a``       | Negation       | The negative of ``a``                                  |\n# \n# <span style=\"display:none\"></span>\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:25:59.611145Z\",\"iopub.execute_input\":\"2024-10-26T13:25:59.611555Z\",\"iopub.status.idle\":\"2024-10-26T13:25:59.621765Z\",\"shell.execute_reply.started\":\"2024-10-26T13:25:59.611519Z\",\"shell.execute_reply\":\"2024-10-26T13:25:59.620754Z\"},\"jupyter\":{\"outputs_hidden\":false}}\npi = 3.14159 # approximate\ndiameter = 3\n\n# Create a variable called 'radius' equal to half the diameter\nradius = diameter/2\n\n# Create a variable called 'area', using the formula for the area of a circle: pi times the radius squared\narea = pi * radius**2\n\n# Check your answer\nq1.check()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Uncomment and run the lines below if you need help.\n#q1.hint()\n#q1.solution()\n\n# %% [markdown]\n# <hr/>\n# \n# # 2.\n# \n# Add code to the following cell to swap variables `a` and `b` (so that `a` refers to the object previously referred to by `b` and vice versa).\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:28:18.573407Z\",\"iopub.execute_input\":\"2024-10-26T13:28:18.574089Z\",\"iopub.status.idle\":\"2024-10-26T13:28:18.584638Z\",\"shell.execute_reply.started\":\"2024-10-26T13:28:18.574048Z\",\"shell.execute_reply\":\"2024-10-26T13:28:18.583620Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n########### Setup code - don't touch this part ######################\n# If you're curious, these are examples of lists. We'll talk about \n# them in depth a few lessons from now. For now, just know that they're\n# yet another type of Python object, like int or float.\na = [1, 2, 3]\nb = [3, 2, 1]\nq2.store_original_ids()\n######################################################################\n\n# Your code goes here. Swap the values to which a and b refer.\n# If you get stuck, you can always uncomment one or both of the lines in\n# the next cell for a hint, or to peek at the solution.\n\n######################################################################\n\nc = a \na = b \nb = c\n\n\n\n# Check your answer\nq2.check()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n#q2.hint()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n#q2.solution()\n\n# %% [markdown]\n# <hr/>\n# \n# # 3a.\n# \n# Add parentheses to the following expression so that it evaluates to 1.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:28:54.193249Z\",\"iopub.execute_input\":\"2024-10-26T13:28:54.194260Z\",\"iopub.status.idle\":\"2024-10-26T13:28:54.202514Z\",\"shell.execute_reply.started\":\"2024-10-26T13:28:54.194209Z\",\"shell.execute_reply\":\"2024-10-26T13:28:54.201337Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n(5 - 3) // 2\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n#q3.a.hint()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:29:04.950736Z\",\"iopub.execute_input\":\"2024-10-26T13:29:04.951099Z\",\"iopub.status.idle\":\"2024-10-26T13:29:04.960823Z\",\"shell.execute_reply.started\":\"2024-10-26T13:29:04.951065Z\",\"shell.execute_reply\":\"2024-10-26T13:29:04.959636Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# Check your answer (Run this code cell to receive credit!)\nq3.a.solution()\n\n# %% [markdown]\n# # 3b.  <span title=\"A bit spicy\" style=\"color: darkgreen \">üå∂Ô∏è</span>\n# \n# <small>Questions, like this one, marked a spicy pepper are a bit harder.</small>\n# \n# Add parentheses to the following expression so that it evaluates to 0.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:34:10.949549Z\",\"iopub.execute_input\":\"2024-10-26T13:34:10.950814Z\",\"iopub.status.idle\":\"2024-10-26T13:34:10.959122Z\",\"shell.execute_reply.started\":\"2024-10-26T13:34:10.950705Z\",\"shell.execute_reply\":\"2024-10-26T13:34:10.957621Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n8 - (3 * 2) - (1 + 1)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n#q3.b.hint()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:34:14.867903Z\",\"iopub.execute_input\":\"2024-10-26T13:34:14.868338Z\",\"iopub.status.idle\":\"2024-10-26T13:34:14.878870Z\",\"shell.execute_reply.started\":\"2024-10-26T13:34:14.868297Z\",\"shell.execute_reply\":\"2024-10-26T13:34:14.877899Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# Check your answer (Run this code cell to receive credit!)\nq3.b.solution()\n\n# %% [markdown]\n# <hr/>\n# \n# # 4. \n# Alice, Bob and Carol have agreed to pool their Halloween candy and split it evenly among themselves.\n# For the sake of their friendship, any candies left over will be smashed. For example, if they collectively\n# bring home 91 candies, they'll take 30 each and smash 1.\n# \n# Write an arithmetic expression below to calculate how many candies they must smash for a given haul.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-26T13:36:50.792955Z\",\"iopub.execute_input\":\"2024-10-26T13:36:50.793341Z\",\"iopub.status.idle\":\"2024-10-26T13:36:50.804194Z\",\"shell.execute_reply.started\":\"2024-10-26T13:36:50.793307Z\",\"shell.execute_reply\":\"2024-10-26T13:36:50.802859Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# Variables representing the number of candies collected by alice, bob, and carol\nalice_candies = 121\nbob_candies = 77\ncarol_candies = 109\n\n# Your code goes here! Replace the right-hand side of this assignment with an expression\n# involving alice_candies, bob_candies, and carol_candies\nto_smash = (alice_candies + bob_candies  + carol_candies ) % 3\n\n# Check your answer\nq4.check()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n#q4.hint()\n#q4.solution()\n\n# %% [markdown]\n# # Keep Going\n# \n# Next up, you'll **[learn to write new functions and understand functions others write](https://www.kaggle.com/colinmorris/functions-and-getting-help)**. This will make you at least 10 times more productive as a Python programmer.\n\n# %% [markdown]\n# ---\n# \n# \n# \n# \n# *Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/python/discussion) to chat with other learners.*","metadata":{"_uuid":"2103cfe7-bc99-4c79-aee5-28f252fad4e4","_cell_guid":"5533a456-3f52-4201-ab06-ca005bb5ac5e","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}